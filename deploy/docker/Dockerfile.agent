# 多阶段构建 - Agent
FROM rust:1.70 AS builder

WORKDIR /app

# 安装依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# 复制Cargo文件
COPY Cargo.toml Cargo.lock ./

# 创建dummy源文件以缓存依赖
RUN mkdir src && echo "fn main() {}" > src/main.rs

# 构建依赖（利用Docker缓存）
RUN cargo build --release && rm -rf src target/release/deps/agent*

# 复制源代码
COPY src/ ./src/

# 构建应用
RUN cargo build --release

# 运行时镜像
FROM debian:bookworm-slim

# 安装必要的工具和库
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# 创建应用用户
RUN groupadd -r logmonitor && useradd -r -g logmonitor logmonitor

# 设置工作目录
WORKDIR /opt/log-monitor/agent

# 创建必要的目录
RUN mkdir -p data logs config && \
    chown -R logmonitor:logmonitor /opt/log-monitor

# 复制构建的二进制文件
COPY --from=builder /app/target/release/agent ./agent

# 复制配置文件
COPY deploy/config/agent.toml ./config/

# 设置权限
RUN chown -R logmonitor:logmonitor /opt/log-monitor && \
    chmod +x /opt/log-monitor/agent/agent

# 切换到应用用户
USER logmonitor

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 启动命令
CMD ["/opt/log-monitor/agent/agent", "--config", "/opt/log-monitor/agent/config/agent.toml"] 